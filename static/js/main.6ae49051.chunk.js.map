{"version":3,"sources":["getVow.jsx","App.js","tools/useInterval.jsx","serviceWorker.js","Menu.jsx","index.js","Layout.jsx"],"names":["vow","a","i","é","è","eu","o","ou","u","in","an","on","getPattern","n","arr","result","Array","len","length","taken","RangeError","x","Math","floor","random","getRandom","Object","keys","myStyle","display","justifyContent","alignItems","height","color","fontFamily","fontSize","transition","width","flexDirection","matchBpm","70","80","90","PatternInterval","props","useState","count","setCount","pattern","level","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","bpm","style","map","backgroundColor","Boolean","window","location","hostname","match","bpmList","levelList","Menu","onClick","setBpm","setLevel","ReactDOM","render","autoPlay","loop","src","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ae49051.chunk.js","sourcesContent":["export const vow = {\n  a: \"#ef9a9a\",\n  i: \"#f48fb1\",\n  é: \"#ce93d8\",\n  è: \"#b39ddb\",\n  eu: \"#81d4fa\",\n  o: \"#b5a142\",\n  ou: \"#ffcc80\",\n  u: \"#a5d6a7\",\n  in: \"#ffab91\",\n  an: \"#80cbc4\",\n  on: \"#b0bec5\"\n};\n\nexport function getPattern(n) {\n  return getRandom(Object.keys(vow), n);\n}\n\nfunction getRandom(arr, n) {\n  var result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport useInterval from \"./tools/useInterval\";\nimport { getRandomColor } from \"./tools/getRandomColor\";\nimport { getPattern, vow } from \"./getVow\";\n\nconst myStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"90vh\",\n  color: \"black\",\n  fontFamily: \"Barlow\",\n  fontSize: \"3em\",\n  transition: \"0.2s ease-in-out\",\n  width: \"100%\",\n  flexDirection: \"column\"\n};\n\nconst matchBpm = {\n  70: 3428,\n  80: 3000,\n  90: 2666\n};\n\nfunction PatternInterval(props) {\n  let [count, setCount] = useState(false);\n  let pattern = getPattern(props.level);\n  useInterval(() => {\n    // Votre logique métier ici\n    setCount(!count);\n  }, matchBpm[props.bpm] * 2);\n\n  return (\n    <div style={{ ...myStyle }}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n          width: \"100%\"\n        }}\n      >\n        {pattern &&\n          pattern.map(pattern => {\n            return (\n              <div\n                style={{\n                  height: \"90vh\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"flex-start\",\n                  backgroundColor: vow[pattern],\n                  color: \"white\",\n                  width: 100 / props.level + \"%\",\n                  fontSize: \"12em\"\n                }}\n              >\n                {pattern}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PatternInterval;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Se souvenir de la dernière fonction de rappel.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Configurer l’intervalle.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst bpmList = [\"70\", \"80\", \"90\"];\nconst levelList = [\"1\", \"2\", \"3\"];\n\nfunction Menu(props) {\n  return (\n    <div\n      style={{\n        height: \"10vh\",\n        width: \"100%\",\n        backgroundColor: \"black\",\n        display: \"flex\"\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n          width: \"50%\",\n          height: \"10vh\"\n        }}\n      >\n        {bpmList.map(bpm => (\n          <div\n            onClick={() => props.setBpm(bpm)}\n            style={{\n              fontFamily: \"Barlow\",\n              fontSize: bpm === props.bpm ? \"2em\" : \"1em\",\n              color: \"white\"\n            }}\n          >\n            {bpm}\n          </div>\n        ))}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          alignItems: \"center\",\n          width: \"50%\",\n          height: \"10vh\"\n        }}\n      >\n        {levelList.map(level => (\n          <div\n            onClick={() => props.setLevel(level)}\n            style={{\n              fontFamily: \"Barlow\",\n              fontSize: level === props.level ? \"2em\" : \"1em\",\n              color: \"white\"\n            }}\n          >\n            {level}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Layout from \"./Layout\";\n\nReactDOM.render(<Layout />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport Menu from \"./Menu\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport PatternInterval from \"./App\";\n\nexport default function Layout() {\n  const [bpm, setBpm] = useState(80);\n  const [level, setLevel] = useState(1);\n  return (\n    <div style={{ height: \"100vh\" }}>\n      <Menu bpm={bpm} setBpm={setBpm} level={level} setLevel={setLevel} />\n      <ReactAudioPlayer\n        autoPlay\n        loop\n        src={\"sounds/\" + bpm + \"bpm.mp3\"}\n      ></ReactAudioPlayer>\n      {bpm && <PatternInterval bpm={bpm} level={level} />}\n    </div>\n  );\n}\n"],"sourceRoot":""}